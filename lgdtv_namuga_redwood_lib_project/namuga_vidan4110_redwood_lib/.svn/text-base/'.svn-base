#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <libusb.h>
#include <pthread.h>
#include "redwood_return_code.h"
#include "redwood_usb_operation.h"


/**********************************************************************/
/* 	 																  */
/*                         Global Variables                           */
/* 																	  */
/**********************************************************************/
libusb_device_handle *g_usb_handle = NULL;

pthread_t usbcontrol_video_thread;
char is_usbcontrol_video_thread_started = 0;

pthread_t usbcontrol_audio_thread;
char is_usbcontrol_audio_thread_started = 0;

pthread_mutex_t mutex_usb_operation;

/**********************************************************************/
/* 																	  */
/*                        SKYPE API									  */
/* 																	  */
/**********************************************************************/
char is_keyframe_request = 0;
char is_bitrate_set = 0;
int  modified_bitrate = 0;
void redwood_usb_keyframe_request(void);
void redwood_usb_bitrate_set(int bps);

/**********************************************************************/
/* 																	  */
/*                        Static Functions                            */
/* 																	  */
/**********************************************************************/
static int is_my_device(libusb_device *dev, unsigned short vid, unsigned short pid);
static void *usbcontrol_video_thread_func(void *ptr);
static void *usbcontrol_audio_thread_func(void *ptr);
static int GetStream(GET_STREAM_EP_TYPE type, int frameLen, char *streamBuffer);
static int GetStreamLength(GET_LENGTH_CMD_TYPE type);
static int GetVideoStreamLength(int *h264Length, int *jpegLength);
static void redwood_reg_keyframe_request(void);
static void redwood_reg_bitrate_set(int bitrate);
static int usb_send_command(int cmdCount, unsigned char *cmdData, int resultCnt, unsigned char *resultData);


/**********************************************************************/
/* 																	  */
/*                        Extern Functions                            */
/* 																	  */
/**********************************************************************/
extern void usleep(int usec);

/**********************************************************************/
/*																	  */
/*                        Source Start                                */
/* 																	  */
/**********************************************************************/
int usbcontrol_video_thread_create(void *ptr)
{
	int ret;

	pthread_attr_t		attr;
	struct sched_param	sched;

	pthread_attr_init(&attr);
	pthread_attr_setstacksize(&attr, USBCONTROL_VIDEO_THREAD_STACKSIZE);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
	pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);

	pthread_attr_setschedpolicy(&attr, SCHED_RR);
	pthread_attr_getschedparam(&attr, &sched);
	sched.sched_priority = USBCONTROL_VIDEO_THREAD_PRIORITY;
	pthread_attr_setschedparam(&attr, &sched);

	is_usbcontrol_video_thread_started = 1;

	ret  = pthread_create( &usbcontrol_video_thread,
							&attr,
							usbcontrol_video_thread_func,
						 	ptr);

	return ret;
}

int usbcontrol_video_thread_destory(void)
{
	is_usbcontrol_video_thread_started = 0; 
	return SUCCESS; 
}

int usbcontrol_audio_thread_create(void *ptr)
{
	int ret;

	pthread_attr_t		attr;
	struct sched_param	sched;

	pthread_attr_init(&attr);
	pthread_attr_setstacksize(&attr, USBCONTROL_AUDIO_THREAD_STACKSIZE);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
	pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);

	pthread_attr_setschedpolicy(&attr, SCHED_RR);
	pthread_attr_getschedparam(&attr, &sched);
	sched.sched_priority = USBCONTROL_AUDIO_THREAD_PRIORITY;
	pthread_attr_setschedparam(&attr, &sched);

	is_usbcontrol_audio_thread_started = 1;

	ret  = pthread_create( &usbcontrol_audio_thread,
							&attr,
							usbcontrol_audio_thread_func,
						 	ptr);

	return ret;
}

int usbcontrol_audio_thread_destory(void)
{
	is_usbcontrol_audio_thread_started = 0;
	return SUCCESS;
}

/**********************************************************************/
/*                 Video Thread Main								  */
/**********************************************************************/
static void *usbcontrol_video_thread_func(void *ptr)
{
	int ret;
	char *streamBuffer;
	int frameLen;

	printf("===>VIDAN4110 INFO : usbcontrol_video_thread_func started\n");
	//usleep(10000);

	streamBuffer = (char*)malloc(64*1024*sizeof(char));
	if ( streamBuffer == NULL )
	{
		printf("===>VIDAN4110 ERROR : %s - cannot allocate memory\n", __FUNCTION__); 
		return NULL;
	}

	while (is_usbcontrol_video_thread_started)
	{
		pthread_mutex_lock(&mutex_usb_operation);
		if ( is_keyframe_request )
		{
			redwood_reg_keyframe_request();
			is_keyframe_request = 0;
		}
		if ( is_bitrate_set )
		{
			redwood_reg_bitrate_set(modified_bitrate);
			is_bitrate_set = 0;
		}

		//h264 check
		ret = GetVideoStreamLength(&h264StreamLen, &jpegStreamLen);
		//printf("h264 frameLen:%d\n", frameLen);
		if ( h264StreamLen > 0 )
		{
			ret = GetStream(H264_STREAM_EP_TYPE, h264StreamLen, streamBuffer);
			if ( ret == h264StreamLen )
			{
				if ( h264callbackFunc != NULL )
					h264callbackFunc(h264StreamLen, streamBuffer);
			}
		}

		if ( jpegStreamLen > 0 )
		{
			ret = GetStream(JPEG_STREAM_EP_TYPE, jpegStreamLen, streamBuffer);
			if ( ret == jpegStreamLen )
			{
				if ( jpegcallbackFunc != NULL )
					jpegcallbackFunc(jpegStreamLen, streamBuffer);
			}
		}	
		//Termination condition check

		pthread_mutex_unlock(&mutex_usb_operation);
		usleep(1000);

	}
	//Debug
	//fclose(outfile);
	if ( streamBuffer )
		free(streamBuffer);

	//is_usbcontrol_video_thread_started = 0;

	printf("===>VIDAN4100 INFO : usbcontrol_video_thread_func terminated\n");

	return NULL;
}

/**********************************************************************/
/*                 Audio Thread Main								  */
/**********************************************************************/
static void *usbcontrol_audio_thread_func(void *ptr)
{
	int ret;
	char *streamBuffer;
	int frameLen;

	printf("===>VIDAN4110 INFO : usbcontrol_audio_thread_func started\n");
	//usleep(10000);
	
	streamBuffer = (char*)malloc(16*1024*sizeof(char));
	if ( streamBuffer == NULL )
	{
		printf("===>VIDAN4110 ERROR : %s - cannot allocate memory\n", __FUNCTION__); 
		return NULL;
	}

	while (is_usbcontrol_audio_thread_started)
	{
		pthread_mutex_lock(&mutex_usb_operation);
		//pcm check
		frameLen = GetStreamLength(PCM_LENGTH_TYPE);
		//printf("pcm frameLen:%d\n", frameLen);
		if ( frameLen > 0 )
		{
			ret = GetStream(PCM_STREAM_EP_TYPE, frameLen, streamBuffer);
			if ( ret == frameLen )
			{
				if ( pcmcallbackFunc != NULL )
					pcmcallbackFunc(frameLen, streamBuffer);
			}
		}

		pthread_mutex_unlock(&mutex_usb_operation);
		usleep(25000);
	}
	//Debug
	//fclose(outfile);
	if ( streamBuffer )
		free(streamBuffer);

	printf("===>VIDAN4100 INFO : usbcontrol_audio_thread_func terminated\n");

	return NULL;
}

/**********************************************************************/
/*                 Video Start Set									  */
/**********************************************************************/
int redwood_video_start_set(void)
{
	int ret;
	unsigned char command;
	unsigned char resultBuf[2];

	command = VIDEO_START_TYPE;
	ret = usb_send_command(1, &command, 2, resultBuf);

	return ret;
}

/**********************************************************************/
/*                 Video Stop Set									  */
/**********************************************************************/
int redwood_video_stop_set(void)
{
	int ret;
	unsigned char command;
	unsigned char resultBuf[2];

	command = VIDEO_STOP_TYPE;
	ret = usb_send_command(1, &command, 2, resultBuf);

	return ret;
}

/**********************************************************************/
/*                 Audio Start Set									  */
/**********************************************************************/
int redwood_audio_start_set(void)
{
	int ret;
	unsigned char command;
	unsigned char resultBuf[2];

	command = AUDIO_START_TYPE;
	ret = usb_send_command(1, &command, 2, resultBuf);

	return ret;
}

/**********************************************************************/
/*                 Audio Stop Set									  */
/**********************************************************************/
int redwood_audio_stop_set(void)
{
	int ret;
	unsigned char command;
	unsigned char resultBuf[2];

	command = AUDIO_STOP_TYPE;
	ret = usb_send_command(1, &command, 2, resultBuf);

	return ret;
}



/**********************************************************************/
/*                 Key Frame Request								  */
/**********************************************************************/
void redwood_usb_keyframe_request(void)
{
	is_keyframe_request = 1;
}

static void redwood_reg_keyframe_request(void)
{
	//TODO

}
/**********************************************************************/
/*                 bit rate control									  */
/**********************************************************************/
void redwood_usb_bitrate_set(int bps)
{
	modified_bitrate = bps; 
	is_bitrate_set = 1;
}
static void redwood_reg_bitrate_set(int bitrate)
{
	//TODO

}
/**********************************************************************/
/*                 usb send command									  */
/**********************************************************************/
static int usb_send_command(int cmdCount, unsigned char *cmdData, int resultCnt, unsigned char *resultData)
{

	int ret;
	int transferred_len;

	//Send Command
   	transferred_len = 0;
	//pthread_mutex_lock(&mutex_usb_operation);
	ret = libusb_bulk_transfer(g_usb_handle,
								0x02,
								cmdData,
								cmdCount,
								&transferred_len,
								100
								);
	//pthread_mutex_unlock(&mutex_usb_operation);

	//Usb return Check
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 Send CMD ERROR : libusb result - %d\n", ret);
		ret = LIBUSB_FAIL;
		return ret;
	}

	//Receive Command
	memset(resultData, 0, resultCnt);
	transferred_len = 0;
	//pthread_mutex_lock(&mutex_usb_operation);
	ret = libusb_bulk_transfer(g_usb_handle,
								0x81,
								resultData,
								resultCnt,
								&transferred_len,
								100
								);
	//pthread_mutex_unlock(&mutex_usb_operation);

	//Usb Return Check
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 Receive RESP ERROR : libusb result - %d\n", ret);
		ret =  LIBUSB_FAIL;
	}
	else
	{
		//FW Return Value
		if ( resultData[0] != 0x00 )
		{
			ret = CMD_RESPONSE_RET_FAIL;
			printf("===>VIDAN4110 Receive RESP ERROR(%d) : 0x%02x\n", ret, resultData[0]);
		}
		//Wrong Command Check
		else if ( resultData[1] != cmdData[0] )
		{
			ret = CMD_WRONG_CMD_FAIL;
			printf("===>VIDAN4110 Receive RESP ERROR(%d) : 0x%02x\n", ret, resultData[1]);
		}
		else
		{
			ret = SUCCESS;
		}
	}

	return ret;
}

/**********************************************************************/
/*                 Get Stream Length		                          */
/**********************************************************************/
static int GetStreamLength(GET_LENGTH_CMD_TYPE type)
{
	int ret;
	int transferred_len;
	int frameLen = 0;

	unsigned char command;
	unsigned char resultBuf[8] = {0};

	command = (unsigned char)type;

   	transferred_len = 0;

	//Request Stream Length
	//pthread_mutex_lock(&mutex_usb_operation);
	ret = libusb_bulk_transfer(g_usb_handle,
								0x02,
								&command,
								1,
								&transferred_len,
								100
								);
	//pthread_mutex_unlock(&mutex_usb_operation);

	//Usb Return Check
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 GET LENGTH ERROR(0x%02x) : libusb result - %d\n", (unsigned char)type, ret);
		ret = LIBUSB_FAIL;
		return ret;
	}

	//Getting Stream Length
	memset(resultBuf, 0, 8);
	transferred_len = 0;
	//pthread_mutex_lock(&mutex_usb_operation);
	ret = libusb_bulk_transfer(g_usb_handle,
								0x81,
								resultBuf,
								8,
								&transferred_len,
								100
								);
	//pthread_mutex_unlock(&mutex_usb_operation);

	//Usb Return Check
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 GET LENGTH RESP(0x%02x) : libusb result - %d\n", (unsigned char)type, ret);
		ret =  LIBUSB_FAIL;
		memset(resultBuf, 0, 8);
	}
	else
	{
		//Receive Check
		if ( transferred_len != 8 )
		{
			ret = GET_WRONG_RESP_LEN;
			printf("===>VIDAN4110 GET LENGTH RESP(%d) : transferred_len - %d\n", ret, transferred_len);
			memset(resultBuf, 0, 8);
		}
		//FW Return Code Check
		else if ( resultBuf[0] != 0x00 )
		{
			if ( resultBuf[0] != 0xfc )
			{
				ret = GET_WRONG_RESP_RESULT;
				printf("===>VIDAN4110 GET LENGTH RESP(%d) : result - 0x%02x\n", ret, resultBuf[0]);
				memset(resultBuf, 0, 8);
			}
		}
		//Wrong Command Check
		else if ( resultBuf[1] != command )
		{
			ret = CMD_WRONG_CMD_FAIL;
			printf("===>VIDAN4110 GET LENGTH RESP(%d) : result - 0x%02x\n", ret, resultBuf[1]);
			memset(resultBuf, 0, 8);
		}

	}

	//Frame Length Setting
	frameLen = (((int)resultBuf[7] << 24 ) & 0xff000000 )
				| (((int)resultBuf[6] << 16 ) & 0x00ff0000)
				| (((int)resultBuf[5] << 8  ) & 0x0000ff00)
				| (((int)resultBuf[4] << 0  ) & 0x000000ff);


	return frameLen;
}

static int GetVideoStreamLength(int *h264Length, int *jpegLength)
{
	int ret;
	int transferred_len;
	int frameLen = 0;

	unsigned char command;
	unsigned char resultBuf[16] = {0};


   	transferred_len = 0;

	//Request Stream Length
	//pthread_mutex_lock(&mutex_usb_operation);
	ret = libusb_bulk_transfer(g_usb_handle,
								0x02,
								0x41,
								1,
								&transferred_len,
								100
								);
	//pthread_mutex_unlock(&mutex_usb_operation);

	//Usb Return Check
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 GET LENGTH ERROR(0x41) : libusb result - %d\n", ret);
		ret = LIBUSB_FAIL;
		return ret;
	}

	//Getting Stream Length
	memset(resultBuf, 0, 16);
	transferred_len = 0;
	//pthread_mutex_lock(&mutex_usb_operation);
	ret = libusb_bulk_transfer(g_usb_handle,
								0x81,
								resultBuf,
								16,
								&transferred_len,
								100
								);
	//pthread_mutex_unlock(&mutex_usb_operation);

	//Usb Return Check
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 GET LENGTH RESP(0x%02x) : libusb result - %d\n", (unsigned char)type, ret);
		ret =  LIBUSB_FAIL;
		memset(resultBuf, 0, 16);
	}
	else
	{
		//Receive Check
		if ( transferred_len != 16 )
		{
			ret = GET_WRONG_RESP_LEN;
			printf("===>VIDAN4110 GET LENGTH RESP(%d) : transferred_len - %d\n", ret, transferred_len);
			memset(resultBuf, 0, 16);
		}
		//FW Return Code Check
		else if ( resultBuf[0] != 0x00 )
		{
			if ( resultBuf[0] != 0xfc )
			{
				ret = GET_WRONG_RESP_RESULT;
				printf("===>VIDAN4110 GET LENGTH RESP(%d) : result - 0x%02x\n", ret, resultBuf[0]);
				memset(resultBuf, 0, 16);
			}
		}
		//Wrong Command Check
		else if ( resultBuf[1] != command )
		{
			ret = CMD_WRONG_CMD_FAIL;
			printf("===>VIDAN4110 GET LENGTH RESP(%d) : result - 0x%02x\n", ret, resultBuf[1]);
			memset(resultBuf, 0, 16);
		}

	}

	//Frame Length Setting
	*h264Length = (((int)resultBuf[7] << 24 ) & 0xff000000 )
				| (((int)resultBuf[6] << 16 ) & 0x00ff0000)
				| (((int)resultBuf[5] << 8  ) & 0x0000ff00)
				| (((int)resultBuf[4] << 0  ) & 0x000000ff);

	*jpegLength = (((int)resultBuf[7 + 8] << 24 ) & 0xff000000 )
				| (((int)resultBuf[6 + 8] << 16 ) & 0x00ff0000)
				| (((int)resultBuf[5 + 8] << 8  ) & 0x0000ff00)
				| (((int)resultBuf[4 + 8] << 0  ) & 0x000000ff);

	return ret;
}



/**********************************************************************/
/*                 Get Stream										  */ 
/**********************************************************************/
static int GetStream(GET_STREAM_EP_TYPE type, int frameLen, char *streamBuffer)
{
	int ret;
	int transferred_len;

   	transferred_len = 0;

	//Getting Stream 
	//pthread_mutex_lock(&mutex_usb_operation);
	ret = libusb_bulk_transfer(g_usb_handle,
								(unsigned char)type,
								(unsigned char*)streamBuffer,
								frameLen,
								&transferred_len,
								500
								);
	//pthread_mutex_unlock(&mutex_usb_operation);

	//Usb Return Check
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 GET STREAM ERROR : libusb result - %d\n", ret);
		ret = LIBUSB_FAIL;
		return ret;
	}
	else
	{
		//Data Length Check
		if ( frameLen != transferred_len )
		{
			ret = GET_WRONG_STREAM_LEN;
			printf("===>VIDAN4110 GET STREAM ERROR(%d) : frameLen - %d, transferredLen - %d\n", ret, frameLen, transferred_len);
			return ret;
		}
	}

	return transferred_len;
}

/**********************************************************************/
/*																	  */
/*                 USB Device Open/close	                          */
/* 																	  */
/**********************************************************************/
int redwood_usb_device_open(unsigned short vid, unsigned short pid)
{

	int ret;

	int i;

	libusb_device **list;
	libusb_device *found = NULL;

	ret = libusb_init(NULL);


	if ( ret < 0 )
	{
		printf("===>VIDAN4110 ERROR : libusb result - %d\n", ret);
		return LIBUSB_FAIL;
	}

	ret = libusb_get_device_list(NULL, &list);
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 ERROR : libusb result - %d\n", ret);
		return LIBUSB_FAIL;
	}

	for (i = 0; i < ret; i++) {
		libusb_device *device = list[i];
		//Debug
		if (is_my_device(device, vid, pid)) {
		   printf("===>VIDAN4110 INFO : Vid - 0x%04x, Pid - 0x%04x\n", vid, pid);
			found = device;

			break;
		}
	}

	if (!found) //My device is disconnected
	{
		return USB_DEVICE_FIND_FAIL;
	}

	//Open -> Reset -> Clain Interface
	ret = libusb_open(found, &g_usb_handle);
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 ERROR : libusb result - %d\n", ret);
		return LIBUSB_FAIL;
	}

	libusb_free_device_list(list, 1); // After open device, free list.

	ret = libusb_reset_device(g_usb_handle);
	if ( ret < 0 )
	{
  		g_usb_handle = NULL;
		printf("===>VIDAN4110 ERROR : libusb result - %d\n", ret);
		return LIBUSB_FAIL;
	}

	ret = libusb_claim_interface(g_usb_handle, 0);
	if ( ret < 0 )
	{
  		g_usb_handle = NULL;
		printf("===>VIDAN4110 ERROR : libusb result - %d\n", ret);
		return LIBUSB_FAIL;
	}

	ret = SUCCESS;

	return ret;
}


int redwood_usb_device_close(void)
{
	int ret;

	if ( !g_usb_handle ) return USB_DEVICE_NULL_FAIL; //if null handle

	ret = libusb_release_interface(g_usb_handle, 0);
	if ( ret < 0 )
	{
		printf("===>VIDAN4110 ERROR : libusb result - %d\n", ret);
		return LIBUSB_FAIL;
	}

	libusb_close(g_usb_handle);

	libusb_exit(NULL); //Deinitialize libusb

	return SUCCESS;

}

static int is_my_device(libusb_device *dev, unsigned short vid, unsigned short pid)
{
   	struct libusb_device_descriptor desc;
	int ret = libusb_get_device_descriptor(dev, &desc);

	if ( ret < 0 )
	{
		printf("===>VIDAN4110 ERROR : libusb result - %d\n", ret);
		ret = 0;
	}
	else
	{
		if ( desc.idVendor == vid && desc.idProduct == pid )
			ret = 1;
		else
			ret = 0;
	}

	return ret;
}


/**********************************************************************/
/*																	  */
/*                        Source End	                              */
/* 																	  */
/**********************************************************************/

